version: '3.7'
services:
    app:
        build:
            context: ./app
            dockerfile: Dockerfile
        container_name: app
        volumes:
            - ./app/www/:/var/www/app/
        working_dir: /var/www/app/
        networks:
            - app-network

    app-nginx:
        build:
            context: docker/app-nginx
            dockerfile: Dockerfile
        container_name: app-nginx
        volumes:
            - ./hosts/nginx:/etc/nginx/conf.d
            - ./app/www:/var/www/app
        ports:
            - "80:80"
        networks:
            - app-network
        depends_on:
          - app

    db:
        image: mysql
        container_name: db
        ports:
            - "3306:3306"
        volumes:
            - ./docker/mysql/mysql_data/db:/var/lib/mysql
        environment:
            - MYSQL_ROOT_PASSWORD=mysql
            - MYSQL_USER=mysql
            - MYSQL_PASSWORD=mysql
            - MYSQL_DATABASE=library_searcher
        networks:
            - app-network

    phpmyadmin:
        image: phpmyadmin
        container_name: phpmyadmin
        links:
          - db
        ports:
            - "8080:80"
        environment:
            - PMA_ARBITRARY=1
            - UPLOAD_LIMIT=1024M
            - MEMORY_LIMIT=1024M
            - MAX_EXECUTION_TIME=300
            - PMA_HOST=db
        networks:
          - app-network
        depends_on:
          - db

#    rabbitmq:
#        image: "rabbitmq:3-management-alpine"
#        container_name: rabbitmq
#        restart: always
#        ports:
#            - "5672:5672"
#            - "15672:15672"
#        volumes:
#            - ./docker/rabbitmq/data/:/var/lib/rabbitmq/mnesia/
#            - ./docker/rabbitmq/log/:/var/log/rabbitmq/mnesia/
#        networks:
#            - app-network
#
    redis:
        image: redis:7.0
        container_name: redis
        restart: always
        ports:
          - "6379:6379"
        volumes:
          - ./docker/redis/data/:/data
        networks:
          - app-network

    elastic:
        image: elasticsearch:8.4.1
        command: elasticsearch
        environment:
            - xpack.security.enabled=false
            - "discovery.type=single-node"
        volumes:
            - ./docker/esdata:/usr/share/elasticsearch/data
        container_name: elasticsearch
        hostname: elasticsearch
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: "6144M"
        restart: always
        ports:
            - "9200:9200"
        networks:
          - app-network

    kibana:
        image: kibana:8.4.1
        container_name: kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        networks:
            - app-network
        depends_on:
            - elastic
        ports:
            - "5601:5601"

networks:
    app-network:
        driver: bridge

